/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fermyon.Nomad.Client;
using Fermyon.Nomad.Model;

namespace Fermyon.Nomad.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <returns>AllocationLogs</returns>
        AllocationLogs GetAllocationLogs(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <returns>ApiResponse of AllocationLogs</returns>
        ApiResponse<AllocationLogs> GetAllocationLogsWithHttpInfo(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllocationLogs</returns>
        System.Threading.Tasks.Task<AllocationLogs> GetAllocationLogsAsync(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllocationLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllocationLogs>> GetAllocationLogsWithHttpInfoAsync(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApi : IClientsApiSync, IClientsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientsApi : IClientsApi
    {
        private Fermyon.Nomad.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientsApi(string basePath)
        {
            this.Configuration = Fermyon.Nomad.Client.Configuration.MergeConfigurations(
                Fermyon.Nomad.Client.GlobalConfiguration.Instance,
                new Fermyon.Nomad.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientsApi(Fermyon.Nomad.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fermyon.Nomad.Client.Configuration.MergeConfigurations(
                Fermyon.Nomad.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientsApi(Fermyon.Nomad.Client.ISynchronousClient client, Fermyon.Nomad.Client.IAsynchronousClient asyncClient, Fermyon.Nomad.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Fermyon.Nomad.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Fermyon.Nomad.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Fermyon.Nomad.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Fermyon.Nomad.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <returns>AllocationLogs</returns>
        public AllocationLogs GetAllocationLogs(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?))
        {
            Fermyon.Nomad.Client.ApiResponse<AllocationLogs> localVarResponse = GetAllocationLogsWithHttpInfo(task, type, allocID, follow, offset, origin, plain);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <returns>ApiResponse of AllocationLogs</returns>
        public Fermyon.Nomad.Client.ApiResponse<AllocationLogs> GetAllocationLogsWithHttpInfo(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?))
        {
            // verify the required parameter 'task' is set
            if (task == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'task' when calling ClientsApi->GetAllocationLogs");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'type' when calling ClientsApi->GetAllocationLogs");

            // verify the required parameter 'allocID' is set
            if (allocID == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'allocID' when calling ClientsApi->GetAllocationLogs");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("allocID", Fermyon.Nomad.Client.ClientUtils.ParameterToString(allocID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "task", task));
            if (follow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "follow", follow));
            }
            localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (origin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "origin", origin));
            }
            if (plain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plain", plain));
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AllocationLogs>("/client/fs/logs/{allocID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllocationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllocationLogs</returns>
        public async System.Threading.Tasks.Task<AllocationLogs> GetAllocationLogsAsync(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<AllocationLogs> localVarResponse = await GetAllocationLogsWithHttpInfoAsync(task, type, allocID, follow, offset, origin, plain, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">Specifies the allocation ID to query. This is specified as part of the URL. Note, this must be the full allocation ID, not the short 8-character one. This is specified as part of the path.</param>
        /// <param name="type">Specifies the stream to stream.</param>
        /// <param name="allocID">Allocation ID.</param>
        /// <param name="follow">Specifies whether to tail the logs. (optional)</param>
        /// <param name="offset">Specifies the offset to start streaming from. (optional)</param>
        /// <param name="origin">Specifies either \&quot;start\&quot; or \&quot;end\&quot; and applies the offset relative to either the start or end of the logs respectively. Defaults to \&quot;start\&quot; (optional)</param>
        /// <param name="plain">Return just the plain text without framing. This can be useful when viewing logs in a browser (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllocationLogs)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<AllocationLogs>> GetAllocationLogsWithHttpInfoAsync(string task, string type, string allocID, bool? follow = default(bool?), int? offset = default(int?), string origin = default(string), bool? plain = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'task' is set
            if (task == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'task' when calling ClientsApi->GetAllocationLogs");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'type' when calling ClientsApi->GetAllocationLogs");

            // verify the required parameter 'allocID' is set
            if (allocID == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'allocID' when calling ClientsApi->GetAllocationLogs");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("allocID", Fermyon.Nomad.Client.ClientUtils.ParameterToString(allocID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "task", task));
            if (follow != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "follow", follow));
            }
            localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (origin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "origin", origin));
            }
            if (plain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plain", plain));
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AllocationLogs>("/client/fs/logs/{allocID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllocationLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
