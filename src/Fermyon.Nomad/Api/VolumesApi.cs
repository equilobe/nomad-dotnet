/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fermyon.Nomad.Client;
using Fermyon.Nomad.Model;

namespace Fermyon.Nomad.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVolumesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        void CreateVolume(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateVolumeWithHttpInfo(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <returns></returns>
        void DeleteSnapshot(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSnapshotWithHttpInfo(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <returns></returns>
        void DeleteVolumeRegistration(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVolumeRegistrationWithHttpInfo(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <returns></returns>
        void DetachOrDeleteVolume(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DetachOrDeleteVolumeWithHttpInfo(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>CSIVolumeListExternalResponse</returns>
        CSIVolumeListExternalResponse GetExternalVolumes(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>ApiResponse of CSIVolumeListExternalResponse</returns>
        ApiResponse<CSIVolumeListExternalResponse> GetExternalVolumesWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>CSISnapshotListResponse</returns>
        CSISnapshotListResponse GetSnapshots(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>ApiResponse of CSISnapshotListResponse</returns>
        ApiResponse<CSISnapshotListResponse> GetSnapshotsWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>CSIVolume</returns>
        CSIVolume GetVolume(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of CSIVolume</returns>
        ApiResponse<CSIVolume> GetVolumeWithHttpInfo(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <returns>List&lt;CSIVolumeListStub&gt;</returns>
        List<CSIVolumeListStub> GetVolumes(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <returns>ApiResponse of List&lt;CSIVolumeListStub&gt;</returns>
        ApiResponse<List<CSIVolumeListStub>> GetVolumesWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>CSISnapshotCreateResponse</returns>
        CSISnapshotCreateResponse PostSnapshot(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of CSISnapshotCreateResponse</returns>
        ApiResponse<CSISnapshotCreateResponse> PostSnapshotWithHttpInfo(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        void PostVolume(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostVolumeWithHttpInfo(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        void PostVolumeRegistration(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostVolumeRegistrationWithHttpInfo(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVolumesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateVolumeAsync(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateVolumeWithHttpInfoAsync(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSnapshotAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSnapshotWithHttpInfoAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVolumeRegistrationAsync(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVolumeRegistrationWithHttpInfoAsync(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DetachOrDeleteVolumeAsync(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DetachOrDeleteVolumeWithHttpInfoAsync(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSIVolumeListExternalResponse</returns>
        System.Threading.Tasks.Task<CSIVolumeListExternalResponse> GetExternalVolumesAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSIVolumeListExternalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSIVolumeListExternalResponse>> GetExternalVolumesWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSISnapshotListResponse</returns>
        System.Threading.Tasks.Task<CSISnapshotListResponse> GetSnapshotsAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSISnapshotListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSISnapshotListResponse>> GetSnapshotsWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSIVolume</returns>
        System.Threading.Tasks.Task<CSIVolume> GetVolumeAsync(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSIVolume)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSIVolume>> GetVolumeWithHttpInfoAsync(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CSIVolumeListStub&gt;</returns>
        System.Threading.Tasks.Task<List<CSIVolumeListStub>> GetVolumesAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CSIVolumeListStub&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CSIVolumeListStub>>> GetVolumesWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSISnapshotCreateResponse</returns>
        System.Threading.Tasks.Task<CSISnapshotCreateResponse> PostSnapshotAsync(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSISnapshotCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CSISnapshotCreateResponse>> PostSnapshotWithHttpInfoAsync(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostVolumeAsync(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostVolumeWithHttpInfoAsync(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostVolumeRegistrationAsync(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostVolumeRegistrationWithHttpInfoAsync(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVolumesApi : IVolumesApiSync, IVolumesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VolumesApi : IVolumesApi
    {
        private Fermyon.Nomad.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VolumesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VolumesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VolumesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VolumesApi(string basePath)
        {
            this.Configuration = Fermyon.Nomad.Client.Configuration.MergeConfigurations(
                Fermyon.Nomad.Client.GlobalConfiguration.Instance,
                new Fermyon.Nomad.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VolumesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VolumesApi(Fermyon.Nomad.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fermyon.Nomad.Client.Configuration.MergeConfigurations(
                Fermyon.Nomad.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VolumesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VolumesApi(Fermyon.Nomad.Client.ISynchronousClient client, Fermyon.Nomad.Client.IAsynchronousClient asyncClient, Fermyon.Nomad.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Fermyon.Nomad.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Fermyon.Nomad.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Fermyon.Nomad.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Fermyon.Nomad.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        public void CreateVolume(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            CreateVolumeWithHttpInfo(volumeId, action, cSIVolumeCreateRequest, region, _namespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Fermyon.Nomad.Client.ApiResponse<Object> CreateVolumeWithHttpInfo(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->CreateVolume");

            // verify the required parameter 'action' is set
            if (action == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'action' when calling VolumesApi->CreateVolume");

            // verify the required parameter 'cSIVolumeCreateRequest' is set
            if (cSIVolumeCreateRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSIVolumeCreateRequest' when calling VolumesApi->CreateVolume");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("action", Fermyon.Nomad.Client.ClientUtils.ParameterToString(action)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSIVolumeCreateRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/volume/csi/{volumeId}/{action}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateVolumeAsync(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateVolumeWithHttpInfoAsync(volumeId, action, cSIVolumeCreateRequest, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="cSIVolumeCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Object>> CreateVolumeWithHttpInfoAsync(string volumeId, string action, CSIVolumeCreateRequest cSIVolumeCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->CreateVolume");

            // verify the required parameter 'action' is set
            if (action == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'action' when calling VolumesApi->CreateVolume");

            // verify the required parameter 'cSIVolumeCreateRequest' is set
            if (cSIVolumeCreateRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSIVolumeCreateRequest' when calling VolumesApi->CreateVolume");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("action", Fermyon.Nomad.Client.ClientUtils.ParameterToString(action)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSIVolumeCreateRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/volume/csi/{volumeId}/{action}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <returns></returns>
        public void DeleteSnapshot(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string))
        {
            DeleteSnapshotWithHttpInfo(region, _namespace, xNomadToken, idempotencyToken, pluginId, snapshotId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Fermyon.Nomad.Client.ApiResponse<Object> DeleteSnapshotWithHttpInfo(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string))
        {
            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (snapshotId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "snapshot_id", snapshotId));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/volumes/snapshot", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSnapshotAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSnapshotWithHttpInfoAsync(region, _namespace, xNomadToken, idempotencyToken, pluginId, snapshotId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="snapshotId">The ID of the snapshot to target. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Object>> DeleteSnapshotWithHttpInfoAsync(string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string pluginId = default(string), string snapshotId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (snapshotId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "snapshot_id", snapshotId));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/volumes/snapshot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <returns></returns>
        public void DeleteVolumeRegistration(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string))
        {
            DeleteVolumeRegistrationWithHttpInfo(volumeId, region, _namespace, xNomadToken, idempotencyToken, force);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Fermyon.Nomad.Client.ApiResponse<Object> DeleteVolumeRegistrationWithHttpInfo(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->DeleteVolumeRegistration");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/volume/csi/{volumeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVolumeRegistration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVolumeRegistrationAsync(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteVolumeRegistrationWithHttpInfoAsync(volumeId, region, _namespace, xNomadToken, idempotencyToken, force, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="force">Used to force the de-registration of a volume. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Object>> DeleteVolumeRegistrationWithHttpInfoAsync(string volumeId, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string force = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->DeleteVolumeRegistration");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/volume/csi/{volumeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVolumeRegistration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <returns></returns>
        public void DetachOrDeleteVolume(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string))
        {
            DetachOrDeleteVolumeWithHttpInfo(volumeId, action, region, _namespace, xNomadToken, idempotencyToken, node);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Fermyon.Nomad.Client.ApiResponse<Object> DetachOrDeleteVolumeWithHttpInfo(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->DetachOrDeleteVolume");

            // verify the required parameter 'action' is set
            if (action == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'action' when calling VolumesApi->DetachOrDeleteVolume");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("action", Fermyon.Nomad.Client.ClientUtils.ParameterToString(action)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (node != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "node", node));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/volume/csi/{volumeId}/{action}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetachOrDeleteVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DetachOrDeleteVolumeAsync(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DetachOrDeleteVolumeWithHttpInfoAsync(volumeId, action, region, _namespace, xNomadToken, idempotencyToken, node, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="action">The action to perform on the Volume (create, detach, delete).</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="node">Specifies node to target volume operation for. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Object>> DetachOrDeleteVolumeWithHttpInfoAsync(string volumeId, string action, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), string node = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->DetachOrDeleteVolume");

            // verify the required parameter 'action' is set
            if (action == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'action' when calling VolumesApi->DetachOrDeleteVolume");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("action", Fermyon.Nomad.Client.ClientUtils.ParameterToString(action)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (node != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "node", node));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/volume/csi/{volumeId}/{action}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetachOrDeleteVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>CSIVolumeListExternalResponse</returns>
        public CSIVolumeListExternalResponse GetExternalVolumes(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string))
        {
            Fermyon.Nomad.Client.ApiResponse<CSIVolumeListExternalResponse> localVarResponse = GetExternalVolumesWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>ApiResponse of CSIVolumeListExternalResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<CSIVolumeListExternalResponse> GetExternalVolumesWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string))
        {
            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CSIVolumeListExternalResponse>("/volumes/external", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalVolumes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSIVolumeListExternalResponse</returns>
        public async System.Threading.Tasks.Task<CSIVolumeListExternalResponse> GetExternalVolumesAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<CSIVolumeListExternalResponse> localVarResponse = await GetExternalVolumesWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSIVolumeListExternalResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<CSIVolumeListExternalResponse>> GetExternalVolumesWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CSIVolumeListExternalResponse>("/volumes/external", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExternalVolumes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>CSISnapshotListResponse</returns>
        public CSISnapshotListResponse GetSnapshots(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string))
        {
            Fermyon.Nomad.Client.ApiResponse<CSISnapshotListResponse> localVarResponse = GetSnapshotsWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <returns>ApiResponse of CSISnapshotListResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<CSISnapshotListResponse> GetSnapshotsWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string))
        {
            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CSISnapshotListResponse>("/volumes/snapshot", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSnapshots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSISnapshotListResponse</returns>
        public async System.Threading.Tasks.Task<CSISnapshotListResponse> GetSnapshotsAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<CSISnapshotListResponse> localVarResponse = await GetSnapshotsWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSISnapshotListResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<CSISnapshotListResponse>> GetSnapshotsWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string pluginId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CSISnapshotListResponse>("/volumes/snapshot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSnapshots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>CSIVolume</returns>
        public CSIVolume GetVolume(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            Fermyon.Nomad.Client.ApiResponse<CSIVolume> localVarResponse = GetVolumeWithHttpInfo(volumeId, region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <returns>ApiResponse of CSIVolume</returns>
        public Fermyon.Nomad.Client.ApiResponse<CSIVolume> GetVolumeWithHttpInfo(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->GetVolume");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CSIVolume>("/volume/csi/{volumeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSIVolume</returns>
        public async System.Threading.Tasks.Task<CSIVolume> GetVolumeAsync(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<CSIVolume> localVarResponse = await GetVolumeWithHttpInfoAsync(volumeId, region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSIVolume)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<CSIVolume>> GetVolumeWithHttpInfoAsync(string volumeId, string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->GetVolume");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CSIVolume>("/volume/csi/{volumeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <returns>List&lt;CSIVolumeListStub&gt;</returns>
        public List<CSIVolumeListStub> GetVolumes(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string))
        {
            Fermyon.Nomad.Client.ApiResponse<List<CSIVolumeListStub>> localVarResponse = GetVolumesWithHttpInfo(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, nodeId, pluginId, type);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <returns>ApiResponse of List&lt;CSIVolumeListStub&gt;</returns>
        public Fermyon.Nomad.Client.ApiResponse<List<CSIVolumeListStub>> GetVolumesWithHttpInfo(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string))
        {
            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (nodeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "node_id", nodeId));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CSIVolumeListStub>>("/volumes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVolumes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CSIVolumeListStub&gt;</returns>
        public async System.Threading.Tasks.Task<List<CSIVolumeListStub>> GetVolumesAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<List<CSIVolumeListStub>> localVarResponse = await GetVolumesWithHttpInfoAsync(region, _namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, nodeId, pluginId, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="nodeId">Filters volume lists by node ID. (optional)</param>
        /// <param name="pluginId">Filters volume lists by plugin ID. (optional)</param>
        /// <param name="type">Filters volume lists to a specific type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CSIVolumeListStub&gt;)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<List<CSIVolumeListStub>>> GetVolumesWithHttpInfoAsync(string region = default(string), string _namespace = default(string), int? index = default(int?), string wait = default(string), string stale = default(string), string prefix = default(string), string xNomadToken = default(string), int? perPage = default(int?), string nextToken = default(string), string nodeId = default(string), string pluginId = default(string), string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (nodeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "node_id", nodeId));
            }
            if (pluginId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "plugin_id", pluginId));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CSIVolumeListStub>>("/volumes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVolumes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>CSISnapshotCreateResponse</returns>
        public CSISnapshotCreateResponse PostSnapshot(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            Fermyon.Nomad.Client.ApiResponse<CSISnapshotCreateResponse> localVarResponse = PostSnapshotWithHttpInfo(cSISnapshotCreateRequest, region, _namespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of CSISnapshotCreateResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<CSISnapshotCreateResponse> PostSnapshotWithHttpInfo(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'cSISnapshotCreateRequest' is set
            if (cSISnapshotCreateRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSISnapshotCreateRequest' when calling VolumesApi->PostSnapshot");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSISnapshotCreateRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CSISnapshotCreateResponse>("/volumes/snapshot", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CSISnapshotCreateResponse</returns>
        public async System.Threading.Tasks.Task<CSISnapshotCreateResponse> PostSnapshotAsync(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<CSISnapshotCreateResponse> localVarResponse = await PostSnapshotWithHttpInfoAsync(cSISnapshotCreateRequest, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSISnapshotCreateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CSISnapshotCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<CSISnapshotCreateResponse>> PostSnapshotWithHttpInfoAsync(CSISnapshotCreateRequest cSISnapshotCreateRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cSISnapshotCreateRequest' is set
            if (cSISnapshotCreateRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSISnapshotCreateRequest' when calling VolumesApi->PostSnapshot");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSISnapshotCreateRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CSISnapshotCreateResponse>("/volumes/snapshot", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSnapshot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        public void PostVolume(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            PostVolumeWithHttpInfo(cSIVolumeRegisterRequest, region, _namespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Fermyon.Nomad.Client.ApiResponse<Object> PostVolumeWithHttpInfo(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'cSIVolumeRegisterRequest' is set
            if (cSIVolumeRegisterRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSIVolumeRegisterRequest' when calling VolumesApi->PostVolume");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSIVolumeRegisterRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/volumes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostVolumeAsync(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostVolumeWithHttpInfoAsync(cSIVolumeRegisterRequest, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Object>> PostVolumeWithHttpInfoAsync(CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cSIVolumeRegisterRequest' is set
            if (cSIVolumeRegisterRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSIVolumeRegisterRequest' when calling VolumesApi->PostVolume");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSIVolumeRegisterRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/volumes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVolume", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns></returns>
        public void PostVolumeRegistration(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            PostVolumeRegistrationWithHttpInfo(volumeId, cSIVolumeRegisterRequest, region, _namespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Fermyon.Nomad.Client.ApiResponse<Object> PostVolumeRegistrationWithHttpInfo(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->PostVolumeRegistration");

            // verify the required parameter 'cSIVolumeRegisterRequest' is set
            if (cSIVolumeRegisterRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSIVolumeRegisterRequest' when calling VolumesApi->PostVolumeRegistration");

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSIVolumeRegisterRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/volume/csi/{volumeId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVolumeRegistration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostVolumeRegistrationAsync(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostVolumeRegistrationWithHttpInfoAsync(volumeId, cSIVolumeRegisterRequest, region, _namespace, xNomadToken, idempotencyToken, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="volumeId">Volume unique identifier.</param>
        /// <param name="cSIVolumeRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="_namespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Object>> PostVolumeRegistrationWithHttpInfoAsync(string volumeId, CSIVolumeRegisterRequest cSIVolumeRegisterRequest, string region = default(string), string _namespace = default(string), string xNomadToken = default(string), string idempotencyToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'volumeId' is set
            if (volumeId == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'volumeId' when calling VolumesApi->PostVolumeRegistration");

            // verify the required parameter 'cSIVolumeRegisterRequest' is set
            if (cSIVolumeRegisterRequest == null)
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'cSIVolumeRegisterRequest' when calling VolumesApi->PostVolumeRegistration");


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("volumeId", Fermyon.Nomad.Client.ClientUtils.ParameterToString(volumeId)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (_namespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", _namespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = cSIVolumeRegisterRequest;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/volume/csi/{volumeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVolumeRegistration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
